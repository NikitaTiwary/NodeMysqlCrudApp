import { Response, Request, NextFunction } from 'express';
import { ObjectID } from 'bson';
import { IApiRequest, IApiModel } from './types';
import { IPopulate, IApiParsedQuery } from './types/IApiQuery';
import ApiController from './api.controller';
declare abstract class BaseController<T extends IApiModel<K, R>, K, R> extends ApiController<T> {
    protected filters: string[];
    constructor(model: T);
    index(req: IApiRequest, _res: Response, next: NextFunction): void;
    read(req: IApiRequest, res: Response, _next: NextFunction): Response;
    create(req: IApiRequest, res: Response, next: NextFunction): void;
    update(req: IApiRequest, res: Response, next: NextFunction): Response | void;
    softDelete(req: IApiRequest, res: Response, _next: NextFunction): Response | void;
    delete(req: IApiRequest, res: Response, _next: NextFunction): Response | void;
    findById(req: IApiRequest, res: Response, next: NextFunction, id: string | number | ObjectID, _urlParam?: any, populate?: IPopulate[]): Response | void;
    stats(req: IApiRequest, res: Response, next: NextFunction): void;
    statsResponse(req: IApiRequest, res: Response, _next: NextFunction): Response;
    statistics(req: IApiRequest, res: Response, next: NextFunction): void;
    parseDateRange(req: IApiRequest, _res: Response, next: NextFunction, _id: string, _urlParam: string): void;
    processQuery(query: Request['query'], defaultQuery: IApiParsedQuery): IApiParsedQuery;
    parseSort(sort?: string | null): Record<string, -1 | 1> | null;
    parseFilter(filterQuery?: string | null): Record<string, string>;
    parsePagination(value: string, defaultValue: string | number): number;
    parseQuery(query: IApiParsedQuery): IApiParsedQuery;
}
export default BaseController;
//# sourceMappingURL=base.controller.d.ts.map